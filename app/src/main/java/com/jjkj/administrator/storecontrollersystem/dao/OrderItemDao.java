package com.jjkj.administrator.storecontrollersystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jjkj.administrator.storecontrollersystem.entity.OrderItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_ITEM".
*/
public class OrderItemDao extends AbstractDao<OrderItem, Integer> {

    public static final String TABLENAME = "ORDER_ITEM";

    /**
     * Properties of entity OrderItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", true, "ID");
        public final static Property Number = new Property(1, int.class, "number", false, "NUMBER");
        public final static Property Goods = new Property(2, String.class, "goods", false, "GOODS");
        public final static Property Price = new Property(3, int.class, "price", false, "PRICE");
    }


    public OrderItemDao(DaoConfig config) {
        super(config);
    }
    
    public OrderItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_ITEM\" (" + //
                "\"ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NUMBER\" INTEGER NOT NULL ," + // 1: number
                "\"GOODS\" TEXT," + // 2: goods
                "\"PRICE\" INTEGER NOT NULL );"); // 3: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_ITEM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNumber());
 
        String goods = entity.getGoods();
        if (goods != null) {
            stmt.bindString(3, goods);
        }
        stmt.bindLong(4, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderItem entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getNumber());
 
        String goods = entity.getGoods();
        if (goods != null) {
            stmt.bindString(3, goods);
        }
        stmt.bindLong(4, entity.getPrice());
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public OrderItem readEntity(Cursor cursor, int offset) {
        OrderItem entity = new OrderItem( //
            cursor.getInt(offset + 0), // id
            cursor.getInt(offset + 1), // number
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goods
            cursor.getInt(offset + 3) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderItem entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setNumber(cursor.getInt(offset + 1));
        entity.setGoods(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(OrderItem entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public Integer getKey(OrderItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderItem entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
