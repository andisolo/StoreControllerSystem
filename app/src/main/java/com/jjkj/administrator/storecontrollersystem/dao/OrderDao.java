package com.jjkj.administrator.storecontrollersystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jjkj.administrator.storecontrollersystem.entity.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property OrderNumber = new Property(1, long.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Salesman = new Property(2, String.class, "salesman", false, "SALESMAN");
        public final static Property CustomerName = new Property(3, String.class, "customerName", false, "CUSTOMER_NAME");
        public final static Property Price = new Property(4, int.class, "price", false, "PRICE");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ORDER_NUMBER\" INTEGER NOT NULL ," + // 1: orderNumber
                "\"SALESMAN\" TEXT," + // 2: salesman
                "\"CUSTOMER_NAME\" TEXT," + // 3: customerName
                "\"PRICE\" INTEGER NOT NULL );"); // 4: price
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getOrderNumber());
 
        String salesman = entity.getSalesman();
        if (salesman != null) {
            stmt.bindString(3, salesman);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(4, customerName);
        }
        stmt.bindLong(5, entity.getPrice());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getOrderNumber());
 
        String salesman = entity.getSalesman();
        if (salesman != null) {
            stmt.bindString(3, salesman);
        }
 
        String customerName = entity.getCustomerName();
        if (customerName != null) {
            stmt.bindString(4, customerName);
        }
        stmt.bindLong(5, entity.getPrice());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // orderNumber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // salesman
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // customerName
            cursor.getInt(offset + 4) // price
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setOrderNumber(cursor.getLong(offset + 1));
        entity.setSalesman(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCustomerName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
