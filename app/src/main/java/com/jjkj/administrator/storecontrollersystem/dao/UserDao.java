package com.jjkj.administrator.storecontrollersystem.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.jjkj.administrator.storecontrollersystem.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, int.class, "age", false, "AGE");
        public final static Property PhoneNum = new Property(3, String.class, "phoneNum", false, "PHONE_NUM");
        public final static Property Performance = new Property(4, int.class, "performance", false, "PERFORMANCE");
        public final static Property Salary = new Property(5, int.class, "salary", false, "SALARY");
        public final static Property EntryDate = new Property(6, java.util.Date.class, "entryDate", false, "ENTRY_DATE");
        public final static Property Level = new Property(7, int.class, "level", false, "LEVEL");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" INTEGER NOT NULL ," + // 2: age
                "\"PHONE_NUM\" TEXT," + // 3: phoneNum
                "\"PERFORMANCE\" INTEGER NOT NULL ," + // 4: performance
                "\"SALARY\" INTEGER NOT NULL ," + // 5: salary
                "\"ENTRY_DATE\" INTEGER," + // 6: entryDate
                "\"LEVEL\" INTEGER NOT NULL );"); // 7: level
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getAge());
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(4, phoneNum);
        }
        stmt.bindLong(5, entity.getPerformance());
        stmt.bindLong(6, entity.getSalary());
 
        java.util.Date entryDate = entity.getEntryDate();
        if (entryDate != null) {
            stmt.bindLong(7, entryDate.getTime());
        }
        stmt.bindLong(8, entity.getLevel());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getAge());
 
        String phoneNum = entity.getPhoneNum();
        if (phoneNum != null) {
            stmt.bindString(4, phoneNum);
        }
        stmt.bindLong(5, entity.getPerformance());
        stmt.bindLong(6, entity.getSalary());
 
        java.util.Date entryDate = entity.getEntryDate();
        if (entryDate != null) {
            stmt.bindLong(7, entryDate.getTime());
        }
        stmt.bindLong(8, entity.getLevel());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // phoneNum
            cursor.getInt(offset + 4), // performance
            cursor.getInt(offset + 5), // salary
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // entryDate
            cursor.getInt(offset + 7) // level
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.getInt(offset + 2));
        entity.setPhoneNum(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPerformance(cursor.getInt(offset + 4));
        entity.setSalary(cursor.getInt(offset + 5));
        entity.setEntryDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setLevel(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
